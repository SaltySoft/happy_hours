//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HappyHours.ServiceReferenceHappyHours {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceHappyHours.IServiceClientHappyHours")]
    public interface IServiceClientHappyHours {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/GetListUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/GetListUserResponse")]
        HhDBO.User[] GetListUser(int max);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/GetListUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/GetListUserResponse")]
        System.Threading.Tasks.Task<HhDBO.User[]> GetListUserAsync(int max);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/GetUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/GetUserResponse")]
        HhDBO.User[] GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/GetUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/GetUserResponse")]
        System.Threading.Tasks.Task<HhDBO.User[]> GetUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/CreateUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/CreateUserResponse")]
        HhDBO.User CreateUser(HhDBO.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/CreateUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/CreateUserResponse")]
        System.Threading.Tasks.Task<HhDBO.User> CreateUserAsync(HhDBO.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/DeleteUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/DeleteUserResponse")]
        bool DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/DeleteUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/UpdateUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/UpdateUserResponse")]
        bool UpdateUser(HhDBO.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClientHappyHours/UpdateUser", ReplyAction="http://tempuri.org/IServiceClientHappyHours/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(HhDBO.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceClientHappyHoursChannel : HappyHours.ServiceReferenceHappyHours.IServiceClientHappyHours, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClientHappyHoursClient : System.ServiceModel.ClientBase<HappyHours.ServiceReferenceHappyHours.IServiceClientHappyHours>, HappyHours.ServiceReferenceHappyHours.IServiceClientHappyHours {
        
        public ServiceClientHappyHoursClient() {
        }
        
        public ServiceClientHappyHoursClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClientHappyHoursClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClientHappyHoursClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClientHappyHoursClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HhDBO.User[] GetListUser(int max) {
            return base.Channel.GetListUser(max);
        }
        
        public System.Threading.Tasks.Task<HhDBO.User[]> GetListUserAsync(int max) {
            return base.Channel.GetListUserAsync(max);
        }
        
        public HhDBO.User[] GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<HhDBO.User[]> GetUserAsync(int id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public HhDBO.User CreateUser(HhDBO.User user) {
            return base.Channel.CreateUser(user);
        }
        
        public System.Threading.Tasks.Task<HhDBO.User> CreateUserAsync(HhDBO.User user) {
            return base.Channel.CreateUserAsync(user);
        }
        
        public bool DeleteUser(int id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public bool UpdateUser(HhDBO.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(HhDBO.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
    }
}
